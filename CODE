import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
list_1 = [2.5,5.1,3.2,8.5,3.5,1.5,9.2,5.5,8.3,2.7,7.7,5.9,4.5,3.3,1.1,8.9,2.5,1.9,6.1,
7.4,2.7,4.8,3.8,6.9,7.8]
list_2 = [21,47,27,75,30,20,88,60,81,25,85,62,41,42,17,95,30,24,67,69,30,54,35,76,86]
df = pd.DataFrame(list(zip(list_1, list_2)),
               columns =['Hours', 'Scores'])
df
plt.scatter(df.Hours, df.Scores, color="g")
plt.xlabel('Hours Studied')
plt.ylabel('Percentage Score')
plt.show()
x= df.iloc[:, :-1].values
y= df.iloc[:, 1].values
from sklearn.linear_model import LinearRegression 
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1
)
Linear_reg=LinearRegression()
Linear_reg.fit(X_train,y_train)
LinearRegression()
line = Linear_reg.coef_*x+Linear_reg.intercept_
plt.scatter(x, y, color="r")
plt.plot(x, line);
plt.show()
y_pred=Linear_reg.predict(X_test)
from sklearn.metrics import r2_score
print("R-Squared Value for Training Set: {:.3f}".format(Linear_reg.score(X_train,y_train)))
print("R-Squared Value for Test Set: {:.3f}".format(Linear_reg.score(X_test,y_test)))
from sklearn import metrics
print('Mean Absolute Error:',
      metrics.mean_absolute_error(y_test,y_pred))
y1_pred=Linear_reg.predict([[9.25]])
print('predicted score :',y1_pred)
